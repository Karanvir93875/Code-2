# Karanvir Singh - Due 4/14/18
# CS240-33 8pm - 9.15pm Section
# Note: Program will not execute if input is between integers 0 to 1; must enter an integer that is 1 or greater. 

			.data 	# data declaration section
prompt: 		.asciiz "\n Only input a value for which N is greater than or equal to 1: "
result:  		.asciiz "\n The sum of the integers from 1 to N (entered number) is: "
FPN:			.asciiz "\n You have entered a Floating Point Number. The fractional part was truncated and only the integer value will be used: "
exit:  			.asciiz "\n  **** Later future graduate, Have a great time in CS240! ****"
			.globl main 
			.text 			# code section
main:  
			li $v0, 4  		# assembly call code to Print String 
			la $a0, prompt  	# load the address of prompt section into $a0 
			syscall   		# print the prompt message 
			
			li $v0, 6  		# assembly call code to Read Integer 
			syscall   		# reads the value of N (number entered) into $v0 
			
			blez $v0,  end  	# branch to end if  $v0 < = 0  
			li $t0, 0  		# clear register $t0 to zero 
			
			mfc1 $t1, $f0  		# move the floating point into register t1 (integer)
			srl $t2, $t1, 23 	# shift the integer value by 23 and store it into t2
			add $s3, $t2, -127 	# add 127 (bias) to the number of shifts done in order to get the exponent
		
			sll $t4, $t1, 9 	# shift left logical by 9 in order and then
			srl $t5, $t4, 9 	# shift it back by 9, shift right logical, so you can zero out the integer
			add $t6, $t5, 8388608 	# add 2^23 in order to add the implied bit back to the integer
		
			add $t7, $s3, 9 	# add 9 to the exponent in order to determine how much to shift to get the fractional part
			sllv $s4, $t6, $t7 	# shift logical left of the integer with the implied bit in order to only get the fractional part 
			
			rol $t4, $t6, $t7 	# rotate the temporary to the left
			
			li $t5, 31		# load immediate 31 to the temporary
			sub $t2, $t5, $s3	# subtract $t5 from $s3 and put the result into $t2
			sllv $t5, $t4, $t2	# $t5 = $t4 << $t2, shift left by variable
			srlv $s5, $t5, $t2	# $s5 = $t5 >> $t2, shift right by variable 
			
			move $v0, $s5		# $v0 = $s5, move the value of register $s5 into register $v0 
			
			li $t0, 0
			blez $t1, end		# branch to end if $t1 is less than zero
			beqz $s4, loop		# branch to loop if $s4 is equal to zero
			
			li $v0, 4		# assembly call code to print string
			la $a0, FPN		# load address of FPN section into $a0 	
			syscall			# print the FPN message
			
			li $v0, 1		# assembly call code to Print Integer	
			move $a0, $s5		# $a0 = $s5, move the value of register $s5 into $a0
			syscall			# print the integer	
			
			move $v0, $s5		# $v0 = $s5, move the value of register $s5 into $v0
loop:   
			add  $t0, $t0, $v0  	# add integers $v0 and $t0 in register $t0 
			addi $v0, $v0, -1  	# adding integers starting with the last number 
			bnez $v0,  loop  	# branch, or go to loop if $v0 is not equal to zero 

			li $v0, 4  		# assembly call code to Print String 
			la $a0, result  	# load address of result into $a0 
			syscall   		# print the string 

			li $v0, 1  		# assembly call code to Print Integer 
			move $a0,  $t0  	# move value to be printed to $a0  
			syscall   		# print sum of integers 
			b main  		# branch to main 
			
end:  
			li $v0, 4  		# assembly call code to Print String 
			la $a0, exit  		# load address of message into $a0 
			syscall   		# print the string 

			li $v0, 10  		# terminate program run and 
			syscall   		# return control to system 


